name: Publish to PyPI

on:
  push:
    branches: [ main, master, workflow-publish ]
    paths:
      - 'setup.py'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: check
      run: |
        if git diff HEAD~1 HEAD --name-only | grep -q "setup.py"; then
          if git diff HEAD~1 HEAD setup.py | grep -q "version="; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Get version
      id: get-version
      if: steps.check.outputs.changed == 'true'
      run: |
        VERSION=$(python -c "import re; content=open('setup.py').read(); match=re.search(r\"version\s*=\s*['\\\"]([^'\\\"]+)['\\\"], content); print(match.group(1) if match else 'unknown')")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

  test:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt
    
    - name: Run tests
      run: |
        pytest tests/ -v

  build-and-publish:
    needs: [check-version, test]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        release_name: Release v${{ needs.check-version.outputs.version }}
        body: |
          Release of version ${{ needs.check-version.outputs.version }}
          
          ## Changes
          - Version updated to ${{ needs.check-version.outputs.version }}
          
          ## Installation
          ```bash
          pip install yrwatertemperatures==${{ needs.check-version.outputs.version }}
          ```
        draft: false
        prerelease: false
